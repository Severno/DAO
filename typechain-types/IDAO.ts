/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IDAOInterface extends utils.Interface {
  functions: {
    "changeVotingRules(uint256,uint256)": FunctionFragment;
    "delegate(uint256,address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "getProposal(uint256)": FunctionFragment;
    "getProposalBalance(uint256)": FunctionFragment;
    "getVoterDaoBalance()": FunctionFragment;
    "newProposal(address,string,bytes)": FunctionFragment;
    "unVote(uint256)": FunctionFragment;
    "vote(uint256)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "changeVotingRules",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterDaoBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newProposal",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeVotingRules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterDaoBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Delegate(uint256,address,address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "ProposalClosed(uint256,string,bool)": EventFragment;
    "ProposalCreated(address,address,bytes,uint256)": EventFragment;
    "ProposalExecutionSucceeded(uint256,string,address)": EventFragment;
    "UnVoted(uint256,address)": EventFragment;
    "Voted(uint256,address)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Delegate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecutionSucceeded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type DelegateEvent = TypedEvent<
  [BigNumber, string, string],
  { _proposalId: BigNumber; _msgSender: string; _to: string }
>;

export type DelegateEventFilter = TypedEventFilter<DelegateEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { _msgSender: string; _amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ProposalClosedEvent = TypedEvent<
  [BigNumber, string, boolean],
  { _proposalId: BigNumber; _description: string; _result: boolean }
>;

export type ProposalClosedEventFilter = TypedEventFilter<ProposalClosedEvent>;

export type ProposalCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  {
    _recipient: string;
    _creator: string;
    _byteCode: string;
    _proposalId: BigNumber;
  }
>;

export type ProposalCreatedEventFilter = TypedEventFilter<ProposalCreatedEvent>;

export type ProposalExecutionSucceededEvent = TypedEvent<
  [BigNumber, string, string],
  { _proposalId: BigNumber; _description: string; _recipient: string }
>;

export type ProposalExecutionSucceededEventFilter =
  TypedEventFilter<ProposalExecutionSucceededEvent>;

export type UnVotedEvent = TypedEvent<
  [BigNumber, string],
  { _proposalId: BigNumber; _voter: string }
>;

export type UnVotedEventFilter = TypedEventFilter<UnVotedEvent>;

export type VotedEvent = TypedEvent<
  [BigNumber, string],
  { _proposalId: BigNumber; _voter: string }
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { _msgSender: string; _amount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface IDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IDAOInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeVotingRules(
      _minQuorum: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate(
      _proposalId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        _description: string;
        _open: boolean;
        _sum: BigNumber;
      }
    >;

    getProposalBalance(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVoterDaoBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    newProposal(
      _recipient: string,
      _description: string,
      _byteCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  changeVotingRules(
    _minQuorum: BigNumberish,
    _votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate(
    _proposalId: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeProposal(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getProposal(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber] & {
      _description: string;
      _open: boolean;
      _sum: BigNumber;
    }
  >;

  getProposalBalance(
    _proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVoterDaoBalance(overrides?: CallOverrides): Promise<BigNumber>;

  newProposal(
    _recipient: string,
    _description: string,
    _byteCode: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unVote(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vote(
    _proposalId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeVotingRules(
      _minQuorum: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate(
      _proposalId: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber] & {
        _description: string;
        _open: boolean;
        _sum: BigNumber;
      }
    >;

    getProposalBalance(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterDaoBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newProposal(
      _recipient: string,
      _description: string,
      _byteCode: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unVote(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    vote(_proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Delegate(uint256,address,address)"(
      _proposalId?: null,
      _msgSender?: string | null,
      _to?: null
    ): DelegateEventFilter;
    Delegate(
      _proposalId?: null,
      _msgSender?: string | null,
      _to?: null
    ): DelegateEventFilter;

    "Deposit(address,uint256)"(
      _msgSender?: null,
      _amount?: null
    ): DepositEventFilter;
    Deposit(_msgSender?: null, _amount?: null): DepositEventFilter;

    "ProposalClosed(uint256,string,bool)"(
      _proposalId?: null,
      _description?: null,
      _result?: null
    ): ProposalClosedEventFilter;
    ProposalClosed(
      _proposalId?: null,
      _description?: null,
      _result?: null
    ): ProposalClosedEventFilter;

    "ProposalCreated(address,address,bytes,uint256)"(
      _recipient?: string | null,
      _creator?: string | null,
      _byteCode?: null,
      _proposalId?: null
    ): ProposalCreatedEventFilter;
    ProposalCreated(
      _recipient?: string | null,
      _creator?: string | null,
      _byteCode?: null,
      _proposalId?: null
    ): ProposalCreatedEventFilter;

    "ProposalExecutionSucceeded(uint256,string,address)"(
      _proposalId?: null,
      _description?: null,
      _recipient?: string | null
    ): ProposalExecutionSucceededEventFilter;
    ProposalExecutionSucceeded(
      _proposalId?: null,
      _description?: null,
      _recipient?: string | null
    ): ProposalExecutionSucceededEventFilter;

    "UnVoted(uint256,address)"(
      _proposalId?: null,
      _voter?: string | null
    ): UnVotedEventFilter;
    UnVoted(_proposalId?: null, _voter?: string | null): UnVotedEventFilter;

    "Voted(uint256,address)"(
      _proposalId?: null,
      _voter?: string | null
    ): VotedEventFilter;
    Voted(_proposalId?: null, _voter?: string | null): VotedEventFilter;

    "Withdraw(address,uint256)"(
      _msgSender?: null,
      _amount?: null
    ): WithdrawEventFilter;
    Withdraw(_msgSender?: null, _amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    changeVotingRules(
      _minQuorum: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate(
      _proposalId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalBalance(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVoterDaoBalance(overrides?: CallOverrides): Promise<BigNumber>;

    newProposal(
      _recipient: string,
      _description: string,
      _byteCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeVotingRules(
      _minQuorum: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate(
      _proposalId: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeProposal(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getProposal(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalBalance(
      _proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVoterDaoBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newProposal(
      _recipient: string,
      _description: string,
      _byteCode: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unVote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      _proposalId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
